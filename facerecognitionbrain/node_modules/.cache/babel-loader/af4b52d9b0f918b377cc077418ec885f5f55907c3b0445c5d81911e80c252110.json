{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\natha\\\\OneDrive\\\\Escritorio\\\\ZTM\\\\Final project\\\\facerecognitionbrain\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport Clarifai from 'clarifai';\nimport FaceRecognition from './Components/FaceRecognition/FaceRecognition';\nimport Navigation from './Components/Navigation/Navigation';\nimport Logo from './Components/Logo/Logo';\nimport ImageLinkForm from './Components/ImageLinkForm/ImageLinkForm';\nimport Rank from './Components/Rank/Rank';\nimport Signin from './Components/Signin/Signin';\nimport Register from './Components/Register/Register';\nimport AppParticles from './Components/Particles/Particles';\n//import { useEffect, useMemo, useState } from \"react\";\n//import Particles, { initParticlesEngine } from \"@tsparticles/react\";\n//import { loadSlim } from \"@tsparticles/slim\";\n//NIUEVO//\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst app = new Clarifai.App({\n  apiKey: 'da25080a0f594fbfb117ffb83bcaaf1b'\n});\n///////////////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, user and app ID, model details, and the URL\n// of the image we want as an input. Change these strings to run your own example.\n//////////////////////////////////////////////////////////////////////////////////////////////////\n\n// Your PAT (Personal Access Token) can be found in the Account's Security section\nconst PAT = '21667652913c4147be6abf57dbb3ea9c';\n// Specify the correct user_id/app_id pairings\n// Since you're making inferences outside your app's scope\nconst USER_ID = 'natalykodes';\nconst APP_ID = 'test';\n// Change these to whatever model and image URL you want to use\nconst MODEL_ID = 'general-image-recognition';\nconst MODEL_VERSION_ID = 'aa7f35c01e0642fda5cf400f543e7c40';\nconst IMAGE_URL = 'https://samples.clarifai.com/metro-north.jpg';\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nconst raw = JSON.stringify({\n  \"user_app_id\": {\n    \"user_id\": USER_ID,\n    \"app_id\": APP_ID\n  },\n  \"inputs\": [{\n    \"data\": {\n      \"image\": {\n        \"url\": IMAGE_URL\n      }\n    }\n  }]\n});\nconst requestOptions = {\n  method: 'POST',\n  headers: {\n    'Accept': 'application/json',\n    'Authorization': 'Key ' + PAT\n  },\n  body: raw\n};\n\n// NOTE: MODEL_VERSION_ID is optional, you can also call prediction with the MODEL_ID only\n// https://api.clarifai.com/v2/models/{YOUR_MODEL_ID}/outputs\n// this will default to the latest version_id\n\nfetch(\"https://api.clarifai.com/v2/models/\" + MODEL_ID + \"/versions/\" + MODEL_VERSION_ID + \"/outputs\", requestOptions).then(response => response.text()).then(result => console.log(result)).catch(error => console.log('error', error));\n\n//ANTERIOR//\nclass App extends Component {\n  constructor() {\n    super();\n    this.calculateFaceLocation = data => {\n      const clarifaiFace = data.outputs[0].data.regions[0].region_info.bounding_box;\n      const image = document.getElementById('inputImage');\n      const width = Number(image.width);\n      const height = Number(image.height);\n      console.log(width, height);\n      return {\n        leftCol: clarifaiFace.left_col * width,\n        topRow: clarifaiFace.top_row * height,\n        rightCol: width - clarifaiFace.right_col * width,\n        bottomRow: height - clarifaiFace.bottom_row * height\n      };\n    };\n    this.displayFaceBox = box => {\n      console.log(box);\n      this.setState({\n        box: box\n      });\n    };\n    this.onInputChange = event => {\n      this.setState({\n        input: event.target.value\n      });\n    };\n    this.onButtonSubmit = () => {\n      this.setState({\n        imageUrl: this.state.input\n      });\n      app.models.predict(Clarifai.FACE_DETECT_MODEL, this.state.input).then(response => this.displayFaceBox(this.calculateFaceLocation(response)).catch(err => console.log(err)));\n    };\n    this.onRouteChange = route => {\n      if (route === 'signout') {\n        this.setState({\n          isSignedIn: false\n        });\n      } else if (route === 'home') {\n        this.setState({\n          isSignedIn: true\n        });\n      }\n      this.setState({\n        route: 'route'\n      });\n    };\n    this.state = {\n      input: '',\n      imageUrl: '',\n      box: {},\n      route: 'Signin',\n      isSignedIn: false\n    };\n  }\n  render() {\n    const {\n      isSignedIn,\n      imageUrl,\n      route,\n      box\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(AppParticles, {\n        className: \"particles\"\n        //id=\"tsparticles\"\n        //particlesLoaded={particlesLoaded}\n        //options={particleOptions}\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Navigation, {\n        isSignedIn: isSignedIn,\n        onRouteChange: this.onRouteChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 11\n      }, this), route === 'home' ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Logo, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 18\n        }, this), /*#__PURE__*/_jsxDEV(ImageLinkForm, {\n          onInputChange: this.onInputChange,\n          onButtonSubmit: this.onButtonSubmit\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(Rank, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(FaceRecognition, {\n          box: box,\n          imageUrl: imageUrl\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 19\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 13\n      }, this) : route === 'Signin' ? /*#__PURE__*/_jsxDEV(Signin, {\n        onRouteChange: this.setState.onRouteChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 17\n      }, this) : /*#__PURE__*/_jsxDEV(Register, {\n        onRouteChange: this.setState.onRouteChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 9\n    }, this);\n  }\n}\n;\nexport default App;","map":{"version":3,"names":["React","Component","Clarifai","FaceRecognition","Navigation","Logo","ImageLinkForm","Rank","Signin","Register","AppParticles","jsxDEV","_jsxDEV","app","App","apiKey","PAT","USER_ID","APP_ID","MODEL_ID","MODEL_VERSION_ID","IMAGE_URL","raw","JSON","stringify","requestOptions","method","headers","body","fetch","then","response","text","result","console","log","catch","error","constructor","calculateFaceLocation","data","clarifaiFace","outputs","regions","region_info","bounding_box","image","document","getElementById","width","Number","height","leftCol","left_col","topRow","top_row","rightCol","right_col","bottomRow","bottom_row","displayFaceBox","box","setState","onInputChange","event","input","target","value","onButtonSubmit","imageUrl","state","models","predict","FACE_DETECT_MODEL","err","onRouteChange","route","isSignedIn","render","className","children","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["C:/Users/natha/OneDrive/Escritorio/ZTM/Final project/facerecognitionbrain/src/App.js"],"sourcesContent":["import React, {Component} from 'react';\nimport './App.css';\nimport Clarifai from 'clarifai';\nimport FaceRecognition from './Components/FaceRecognition/FaceRecognition'\nimport Navigation from './Components/Navigation/Navigation';\nimport Logo from './Components/Logo/Logo';\nimport ImageLinkForm from './Components/ImageLinkForm/ImageLinkForm';\nimport Rank from './Components/Rank/Rank';\nimport Signin from './Components/Signin/Signin'\nimport Register from './Components/Register/Register'\n\nimport AppParticles from './Components/Particles/Particles';\n//import { useEffect, useMemo, useState } from \"react\";\n//import Particles, { initParticlesEngine } from \"@tsparticles/react\";\n//import { loadSlim } from \"@tsparticles/slim\";\n//NIUEVO//\nconst app = new Clarifai.App({\n  apiKey: 'da25080a0f594fbfb117ffb83bcaaf1b'\n });\n ///////////////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, user and app ID, model details, and the URL\n    // of the image we want as an input. Change these strings to run your own example.\n    //////////////////////////////////////////////////////////////////////////////////////////////////\n\n    // Your PAT (Personal Access Token) can be found in the Account's Security section\n    const PAT = '21667652913c4147be6abf57dbb3ea9c';\n    // Specify the correct user_id/app_id pairings\n    // Since you're making inferences outside your app's scope\n    const USER_ID = 'natalykodes';       \n    const APP_ID = 'test';\n    // Change these to whatever model and image URL you want to use\n    const MODEL_ID = 'general-image-recognition';\n    const MODEL_VERSION_ID = 'aa7f35c01e0642fda5cf400f543e7c40';    \n    const IMAGE_URL = 'https://samples.clarifai.com/metro-north.jpg';\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const raw = JSON.stringify({\n        \"user_app_id\": {\n            \"user_id\": USER_ID,\n            \"app_id\": APP_ID\n        },\n        \"inputs\": [\n            {\n                \"data\": {\n                    \"image\": {\n                        \"url\": IMAGE_URL\n                    }\n                }\n            }\n        ]\n    });\n\n    const requestOptions = {\n        method: 'POST',\n        headers: {\n            'Accept': 'application/json',\n            'Authorization': 'Key ' + PAT\n        },\n        body: raw\n    };\n\n    // NOTE: MODEL_VERSION_ID is optional, you can also call prediction with the MODEL_ID only\n    // https://api.clarifai.com/v2/models/{YOUR_MODEL_ID}/outputs\n    // this will default to the latest version_id\n\n    fetch(\"https://api.clarifai.com/v2/models/\" + MODEL_ID + \"/versions/\" + MODEL_VERSION_ID + \"/outputs\", requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log('error', error));\n\n        //ANTERIOR//\nclass App extends Component {\n\n  constructor(){\n    super();\n    this.state={\n      input: '',\n      imageUrl: '',\n      box: {},\n      route: 'Signin',\n      isSignedIn: false\n    }\n  }\n\n  calculateFaceLocation =(data)=>{\n    const clarifaiFace= data.outputs[0].data.regions[0].region_info.bounding_box\n    const image= document.getElementById('inputImage');\n    const width= Number(image.width);\n    const height= Number(image.height);\n    console.log(width, height);\n    return{\n      leftCol: clarifaiFace.left_col * width,\n      topRow: clarifaiFace.top_row * height,\n      rightCol: width - (clarifaiFace.right_col * width),\n      bottomRow: height - (clarifaiFace.bottom_row * height),\n    }\n  }\n\n  displayFaceBox= (box)=>{\n    console.log(box);\n    this.setState({box: box})\n  }\n\n  onInputChange= (event)=>{\n    this.setState({input: event.target.value})\n  }\n\n  onButtonSubmit= ()=>{\n    this.setState({imageUrl: this.state.input})\n    app.models.predict(Clarifai.FACE_DETECT_MODEL, this.state.input).then(response=>this.displayFaceBox(this.calculateFaceLocation(response))\n    .catch(err=>console.log(err))\n    ); \n  }\n  onRouteChange= (route)=>{\n    if(route==='signout'){\n      this.setState({isSignedIn: false})\n    } else if (route=== 'home'){\n      this.setState({isSignedIn: true})\n    }\n    this.setState({route: 'route'});\n  }\n   render(){\n    const {isSignedIn, imageUrl, route, box}= this.state\n      return (\n        <div className=\"App\">\n          <AppParticles className='particles'\n            //id=\"tsparticles\"\n            //particlesLoaded={particlesLoaded}\n            //options={particleOptions}\n          />\n    \n          <Navigation isSignedIn={isSignedIn} onRouteChange={this.onRouteChange}/>\n          { route === 'home' \n            ? \n            <div><Logo />\n                  <ImageLinkForm \n                  onInputChange={this.onInputChange} \n                  onButtonSubmit={this.onButtonSubmit}/>\n                  <Rank />\n                  <FaceRecognition box={box} imageUrl={imageUrl}/>\n          </div>\n          \n            : (\n              route=== 'Signin' \n              ? <Signin onRouteChange={this.setState.onRouteChange}/>\n              : <Register onRouteChange={this.setState.onRouteChange}/>\n            ) \n          }\n        </div>\n      );\n    }\n  \n    \n  };\n\n\nexport default App;\n"],"mappings":";AAAA,OAAOA,KAAK,IAAGC,SAAS,QAAO,OAAO;AACtC,OAAO,WAAW;AAClB,OAAOC,QAAQ,MAAM,UAAU;AAC/B,OAAOC,eAAe,MAAM,8CAA8C;AAC1E,OAAOC,UAAU,MAAM,oCAAoC;AAC3D,OAAOC,IAAI,MAAM,wBAAwB;AACzC,OAAOC,aAAa,MAAM,0CAA0C;AACpE,OAAOC,IAAI,MAAM,wBAAwB;AACzC,OAAOC,MAAM,MAAM,4BAA4B;AAC/C,OAAOC,QAAQ,MAAM,gCAAgC;AAErD,OAAOC,YAAY,MAAM,kCAAkC;AAC3D;AACA;AACA;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,GAAG,GAAG,IAAIX,QAAQ,CAACY,GAAG,CAAC;EAC3BC,MAAM,EAAE;AACT,CAAC,CAAC;AACF;AACG;AACA;AACA;;AAEA;AACA,MAAMC,GAAG,GAAG,kCAAkC;AAC9C;AACA;AACA,MAAMC,OAAO,GAAG,aAAa;AAC7B,MAAMC,MAAM,GAAG,MAAM;AACrB;AACA,MAAMC,QAAQ,GAAG,2BAA2B;AAC5C,MAAMC,gBAAgB,GAAG,kCAAkC;AAC3D,MAAMC,SAAS,GAAG,8CAA8C;;AAEhE;AACA;AACA;;AAEA,MAAMC,GAAG,GAAGC,IAAI,CAACC,SAAS,CAAC;EACvB,aAAa,EAAE;IACX,SAAS,EAAEP,OAAO;IAClB,QAAQ,EAAEC;EACd,CAAC;EACD,QAAQ,EAAE,CACN;IACI,MAAM,EAAE;MACJ,OAAO,EAAE;QACL,KAAK,EAAEG;MACX;IACJ;EACJ,CAAC;AAET,CAAC,CAAC;AAEF,MAAMI,cAAc,GAAG;EACnBC,MAAM,EAAE,MAAM;EACdC,OAAO,EAAE;IACL,QAAQ,EAAE,kBAAkB;IAC5B,eAAe,EAAE,MAAM,GAAGX;EAC9B,CAAC;EACDY,IAAI,EAAEN;AACV,CAAC;;AAED;AACA;AACA;;AAEAO,KAAK,CAAC,qCAAqC,GAAGV,QAAQ,GAAG,YAAY,GAAGC,gBAAgB,GAAG,UAAU,EAAEK,cAAc,CAAC,CACjHK,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACG,MAAM,IAAIC,OAAO,CAACC,GAAG,CAACF,MAAM,CAAC,CAAC,CACnCG,KAAK,CAACC,KAAK,IAAIH,OAAO,CAACC,GAAG,CAAC,OAAO,EAAEE,KAAK,CAAC,CAAC;;AAE5C;AACR,MAAMvB,GAAG,SAASb,SAAS,CAAC;EAE1BqC,WAAWA,CAAA,EAAE;IACX,KAAK,CAAC,CAAC;IAAC,KAUVC,qBAAqB,GAAGC,IAAI,IAAG;MAC7B,MAAMC,YAAY,GAAED,IAAI,CAACE,OAAO,CAAC,CAAC,CAAC,CAACF,IAAI,CAACG,OAAO,CAAC,CAAC,CAAC,CAACC,WAAW,CAACC,YAAY;MAC5E,MAAMC,KAAK,GAAEC,QAAQ,CAACC,cAAc,CAAC,YAAY,CAAC;MAClD,MAAMC,KAAK,GAAEC,MAAM,CAACJ,KAAK,CAACG,KAAK,CAAC;MAChC,MAAME,MAAM,GAAED,MAAM,CAACJ,KAAK,CAACK,MAAM,CAAC;MAClCjB,OAAO,CAACC,GAAG,CAACc,KAAK,EAAEE,MAAM,CAAC;MAC1B,OAAM;QACJC,OAAO,EAAEX,YAAY,CAACY,QAAQ,GAAGJ,KAAK;QACtCK,MAAM,EAAEb,YAAY,CAACc,OAAO,GAAGJ,MAAM;QACrCK,QAAQ,EAAEP,KAAK,GAAIR,YAAY,CAACgB,SAAS,GAAGR,KAAM;QAClDS,SAAS,EAAEP,MAAM,GAAIV,YAAY,CAACkB,UAAU,GAAGR;MACjD,CAAC;IACH,CAAC;IAAA,KAEDS,cAAc,GAAGC,GAAG,IAAG;MACrB3B,OAAO,CAACC,GAAG,CAAC0B,GAAG,CAAC;MAChB,IAAI,CAACC,QAAQ,CAAC;QAACD,GAAG,EAAEA;MAAG,CAAC,CAAC;IAC3B,CAAC;IAAA,KAEDE,aAAa,GAAGC,KAAK,IAAG;MACtB,IAAI,CAACF,QAAQ,CAAC;QAACG,KAAK,EAAED,KAAK,CAACE,MAAM,CAACC;MAAK,CAAC,CAAC;IAC5C,CAAC;IAAA,KAEDC,cAAc,GAAE,MAAI;MAClB,IAAI,CAACN,QAAQ,CAAC;QAACO,QAAQ,EAAE,IAAI,CAACC,KAAK,CAACL;MAAK,CAAC,CAAC;MAC3CpD,GAAG,CAAC0D,MAAM,CAACC,OAAO,CAACtE,QAAQ,CAACuE,iBAAiB,EAAE,IAAI,CAACH,KAAK,CAACL,KAAK,CAAC,CAACnC,IAAI,CAACC,QAAQ,IAAE,IAAI,CAAC6B,cAAc,CAAC,IAAI,CAACrB,qBAAqB,CAACR,QAAQ,CAAC,CAAC,CACxIK,KAAK,CAACsC,GAAG,IAAExC,OAAO,CAACC,GAAG,CAACuC,GAAG,CAAC,CAC5B,CAAC;IACH,CAAC;IAAA,KACDC,aAAa,GAAGC,KAAK,IAAG;MACtB,IAAGA,KAAK,KAAG,SAAS,EAAC;QACnB,IAAI,CAACd,QAAQ,CAAC;UAACe,UAAU,EAAE;QAAK,CAAC,CAAC;MACpC,CAAC,MAAM,IAAID,KAAK,KAAI,MAAM,EAAC;QACzB,IAAI,CAACd,QAAQ,CAAC;UAACe,UAAU,EAAE;QAAI,CAAC,CAAC;MACnC;MACA,IAAI,CAACf,QAAQ,CAAC;QAACc,KAAK,EAAE;MAAO,CAAC,CAAC;IACjC,CAAC;IA7CC,IAAI,CAACN,KAAK,GAAC;MACTL,KAAK,EAAE,EAAE;MACTI,QAAQ,EAAE,EAAE;MACZR,GAAG,EAAE,CAAC,CAAC;MACPe,KAAK,EAAE,QAAQ;MACfC,UAAU,EAAE;IACd,CAAC;EACH;EAuCCC,MAAMA,CAAA,EAAE;IACP,MAAM;MAACD,UAAU;MAAER,QAAQ;MAAEO,KAAK;MAAEf;IAAG,CAAC,GAAE,IAAI,CAACS,KAAK;IAClD,oBACE1D,OAAA;MAAKmE,SAAS,EAAC,KAAK;MAAAC,QAAA,gBAClBpE,OAAA,CAACF,YAAY;QAACqE,SAAS,EAAC;QACtB;QACA;QACA;MAAA;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACD,CAAC,eAEFxE,OAAA,CAACR,UAAU;QAACyE,UAAU,EAAEA,UAAW;QAACF,aAAa,EAAE,IAAI,CAACA;MAAc;QAAAM,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAC,CAAC,EACtER,KAAK,KAAK,MAAM,gBAEhBhE,OAAA;QAAAoE,QAAA,gBAAKpE,OAAA,CAACP,IAAI;UAAA4E,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eACPxE,OAAA,CAACN,aAAa;UACdyD,aAAa,EAAE,IAAI,CAACA,aAAc;UAClCK,cAAc,EAAE,IAAI,CAACA;QAAe;UAAAa,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAC,CAAC,eACtCxE,OAAA,CAACL,IAAI;UAAA0E,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eACRxE,OAAA,CAACT,eAAe;UAAC0D,GAAG,EAAEA,GAAI;UAACQ,QAAQ,EAAEA;QAAS;UAAAY,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAC,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACnD,CAAC,GAGFR,KAAK,KAAI,QAAQ,gBACfhE,OAAA,CAACJ,MAAM;QAACmE,aAAa,EAAE,IAAI,CAACb,QAAQ,CAACa;MAAc;QAAAM,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAC,CAAC,gBACrDxE,OAAA,CAACH,QAAQ;QAACkE,aAAa,EAAE,IAAI,CAACb,QAAQ,CAACa;MAAc;QAAAM,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAC,CACzD;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEA,CAAC;EAEV;AAGF;AAAC;AAGH,eAAetE,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}