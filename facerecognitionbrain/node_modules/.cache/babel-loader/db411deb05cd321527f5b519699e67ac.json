{"ast":null,"code":"import { clamp, getRandom, getRangeMax, getRangeMin, getRangeValue, mix, randomInRange, setRangeValue } from \"./NumberUtils.js\";\nimport { isArray, isString } from \"./TypeUtils.js\";\nimport { millisecondsToSeconds, percentDenominator } from \"../Core/Utils/Constants.js\";\nimport { AnimationStatus } from \"../Enums/AnimationStatus.js\";\nimport { itemFromArray } from \"./Utils.js\";\nvar RgbIndexes;\n(function (RgbIndexes) {\n  RgbIndexes[RgbIndexes[\"r\"] = 1] = \"r\";\n  RgbIndexes[RgbIndexes[\"g\"] = 2] = \"g\";\n  RgbIndexes[RgbIndexes[\"b\"] = 3] = \"b\";\n  RgbIndexes[RgbIndexes[\"a\"] = 4] = \"a\";\n})(RgbIndexes || (RgbIndexes = {}));\nconst randomColorValue = \"random\",\n  midColorValue = \"mid\",\n  colorManagers = new Map();\nexport function addColorManager(manager) {\n  colorManagers.set(manager.key, manager);\n}\nfunction stringToRgba(input) {\n  for (const [, manager] of colorManagers) {\n    if (input.startsWith(manager.stringPrefix)) {\n      return manager.parseString(input);\n    }\n  }\n  const shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])([a-f\\d])?$/i,\n    hexFixed = input.replace(shorthandRegex, (_, r, g, b, a) => {\n      return r + r + g + g + b + b + (a !== undefined ? a + a : \"\");\n    }),\n    regex = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})?$/i,\n    result = regex.exec(hexFixed),\n    radix = 16,\n    defaultAlpha = 1,\n    alphaFactor = 0xff;\n  return result ? {\n    a: result[RgbIndexes.a] !== undefined ? parseInt(result[RgbIndexes.a], radix) / alphaFactor : defaultAlpha,\n    b: parseInt(result[RgbIndexes.b], radix),\n    g: parseInt(result[RgbIndexes.g], radix),\n    r: parseInt(result[RgbIndexes.r], radix)\n  } : undefined;\n}\nexport function rangeColorToRgb(input, index, useIndex = true) {\n  if (!input) {\n    return;\n  }\n  const color = isString(input) ? {\n    value: input\n  } : input;\n  if (isString(color.value)) {\n    return colorToRgb(color.value, index, useIndex);\n  }\n  if (isArray(color.value)) {\n    return rangeColorToRgb({\n      value: itemFromArray(color.value, index, useIndex)\n    });\n  }\n  for (const [, manager] of colorManagers) {\n    const res = manager.handleRangeColor(color);\n    if (res) {\n      return res;\n    }\n  }\n}\nexport function colorToRgb(input, index, useIndex = true) {\n  if (!input) {\n    return;\n  }\n  const color = isString(input) ? {\n    value: input\n  } : input;\n  if (isString(color.value)) {\n    return color.value === randomColorValue ? getRandomRgbColor() : stringToRgb(color.value);\n  }\n  if (isArray(color.value)) {\n    return colorToRgb({\n      value: itemFromArray(color.value, index, useIndex)\n    });\n  }\n  for (const [, manager] of colorManagers) {\n    const res = manager.handleColor(color);\n    if (res) {\n      return res;\n    }\n  }\n}\nexport function colorToHsl(color, index, useIndex = true) {\n  const rgb = colorToRgb(color, index, useIndex);\n  return rgb ? rgbToHsl(rgb) : undefined;\n}\nexport function rangeColorToHsl(color, index, useIndex = true) {\n  const rgb = rangeColorToRgb(color, index, useIndex);\n  return rgb ? rgbToHsl(rgb) : undefined;\n}\nexport function rgbToHsl(color) {\n  const rgbMax = 255,\n    hMax = 360,\n    sMax = 100,\n    lMax = 100,\n    hMin = 0,\n    sMin = 0,\n    hPhase = 60,\n    half = 0.5,\n    double = 2,\n    r1 = color.r / rgbMax,\n    g1 = color.g / rgbMax,\n    b1 = color.b / rgbMax,\n    max = Math.max(r1, g1, b1),\n    min = Math.min(r1, g1, b1),\n    res = {\n      h: hMin,\n      l: (max + min) * half,\n      s: sMin\n    };\n  if (max !== min) {\n    res.s = res.l < half ? (max - min) / (max + min) : (max - min) / (double - max - min);\n    res.h = r1 === max ? (g1 - b1) / (max - min) : res.h = g1 === max ? double + (b1 - r1) / (max - min) : double * double + (r1 - g1) / (max - min);\n  }\n  res.l *= lMax;\n  res.s *= sMax;\n  res.h *= hPhase;\n  if (res.h < hMin) {\n    res.h += hMax;\n  }\n  if (res.h >= hMax) {\n    res.h -= hMax;\n  }\n  return res;\n}\nexport function stringToAlpha(input) {\n  return stringToRgba(input)?.a;\n}\nexport function stringToRgb(input) {\n  return stringToRgba(input);\n}\nexport function hslToRgb(hsl) {\n  const hMax = 360,\n    sMax = 100,\n    lMax = 100,\n    sMin = 0,\n    lMin = 0,\n    h = (hsl.h % hMax + hMax) % hMax,\n    s = Math.max(sMin, Math.min(sMax, hsl.s)),\n    l = Math.max(lMin, Math.min(lMax, hsl.l)),\n    hNormalized = h / hMax,\n    sNormalized = s / sMax,\n    lNormalized = l / lMax,\n    rgbFactor = 255,\n    triple = 3;\n  if (s === sMin) {\n    const grayscaleValue = Math.round(lNormalized * rgbFactor);\n    return {\n      r: grayscaleValue,\n      g: grayscaleValue,\n      b: grayscaleValue\n    };\n  }\n  const half = 0.5,\n    double = 2,\n    channel = (temp1, temp2, temp3) => {\n      const temp3Min = 0,\n        temp3Max = 1,\n        sextuple = 6;\n      if (temp3 < temp3Min) {\n        temp3++;\n      }\n      if (temp3 > temp3Max) {\n        temp3--;\n      }\n      if (temp3 * sextuple < temp3Max) {\n        return temp1 + (temp2 - temp1) * sextuple * temp3;\n      }\n      if (temp3 * double < temp3Max) {\n        return temp2;\n      }\n      if (temp3 * triple < temp3Max * double) {\n        const temp3Offset = double / triple;\n        return temp1 + (temp2 - temp1) * (temp3Offset - temp3) * sextuple;\n      }\n      return temp1;\n    },\n    sNormalizedOffset = 1,\n    temp1 = lNormalized < half ? lNormalized * (sNormalizedOffset + sNormalized) : lNormalized + sNormalized - lNormalized * sNormalized,\n    temp2 = double * lNormalized - temp1,\n    phaseNumerator = 1,\n    phaseThird = phaseNumerator / triple,\n    red = Math.min(rgbFactor, rgbFactor * channel(temp2, temp1, hNormalized + phaseThird)),\n    green = Math.min(rgbFactor, rgbFactor * channel(temp2, temp1, hNormalized)),\n    blue = Math.min(rgbFactor, rgbFactor * channel(temp2, temp1, hNormalized - phaseThird));\n  return {\n    r: Math.round(red),\n    g: Math.round(green),\n    b: Math.round(blue)\n  };\n}\nexport function hslaToRgba(hsla) {\n  const rgbResult = hslToRgb(hsla);\n  return {\n    a: hsla.a,\n    b: rgbResult.b,\n    g: rgbResult.g,\n    r: rgbResult.r\n  };\n}\nexport function getRandomRgbColor(min) {\n  const defaultMin = 0,\n    fixedMin = min ?? defaultMin,\n    rgbMax = 256;\n  return {\n    b: Math.floor(randomInRange(setRangeValue(fixedMin, rgbMax))),\n    g: Math.floor(randomInRange(setRangeValue(fixedMin, rgbMax))),\n    r: Math.floor(randomInRange(setRangeValue(fixedMin, rgbMax)))\n  };\n}\nexport function getStyleFromRgb(color, opacity) {\n  const defaultOpacity = 1;\n  return `rgba(${color.r}, ${color.g}, ${color.b}, ${opacity ?? defaultOpacity})`;\n}\nexport function getStyleFromHsl(color, opacity) {\n  const defaultOpacity = 1;\n  return `hsla(${color.h}, ${color.s}%, ${color.l}%, ${opacity ?? defaultOpacity})`;\n}\nexport function colorMix(color1, color2, size1, size2) {\n  let rgb1 = color1,\n    rgb2 = color2;\n  if (rgb1.r === undefined) {\n    rgb1 = hslToRgb(color1);\n  }\n  if (rgb2.r === undefined) {\n    rgb2 = hslToRgb(color2);\n  }\n  return {\n    b: mix(rgb1.b, rgb2.b, size1, size2),\n    g: mix(rgb1.g, rgb2.g, size1, size2),\n    r: mix(rgb1.r, rgb2.r, size1, size2)\n  };\n}\nexport function getLinkColor(p1, p2, linkColor) {\n  if (linkColor === randomColorValue) {\n    return getRandomRgbColor();\n  } else if (linkColor === midColorValue) {\n    const sourceColor = p1.getFillColor() ?? p1.getStrokeColor(),\n      destColor = p2?.getFillColor() ?? p2?.getStrokeColor();\n    if (sourceColor && destColor && p2) {\n      return colorMix(sourceColor, destColor, p1.getRadius(), p2.getRadius());\n    } else {\n      const hslColor = sourceColor ?? destColor;\n      if (hslColor) {\n        return hslToRgb(hslColor);\n      }\n    }\n  } else {\n    return linkColor;\n  }\n}\nexport function getLinkRandomColor(optColor, blink, consent) {\n  const color = isString(optColor) ? optColor : optColor.value;\n  if (color === randomColorValue) {\n    if (consent) {\n      return rangeColorToRgb({\n        value: color\n      });\n    }\n    if (blink) {\n      return randomColorValue;\n    }\n    return midColorValue;\n  } else if (color === midColorValue) {\n    return midColorValue;\n  } else {\n    return rangeColorToRgb({\n      value: color\n    });\n  }\n}\nexport function getHslFromAnimation(animation) {\n  return animation !== undefined ? {\n    h: animation.h.value,\n    s: animation.s.value,\n    l: animation.l.value\n  } : undefined;\n}\nexport function getHslAnimationFromHsl(hsl, animationOptions, reduceFactor) {\n  const resColor = {\n    h: {\n      enable: false,\n      value: hsl.h\n    },\n    s: {\n      enable: false,\n      value: hsl.s\n    },\n    l: {\n      enable: false,\n      value: hsl.l\n    }\n  };\n  if (animationOptions) {\n    setColorAnimation(resColor.h, animationOptions.h, reduceFactor);\n    setColorAnimation(resColor.s, animationOptions.s, reduceFactor);\n    setColorAnimation(resColor.l, animationOptions.l, reduceFactor);\n  }\n  return resColor;\n}\nfunction setColorAnimation(colorValue, colorAnimation, reduceFactor) {\n  colorValue.enable = colorAnimation.enable;\n  const defaultVelocity = 0,\n    decayOffset = 1,\n    defaultLoops = 0,\n    defaultTime = 0;\n  if (colorValue.enable) {\n    colorValue.velocity = getRangeValue(colorAnimation.speed) / percentDenominator * reduceFactor;\n    colorValue.decay = decayOffset - getRangeValue(colorAnimation.decay);\n    colorValue.status = AnimationStatus.increasing;\n    colorValue.loops = defaultLoops;\n    colorValue.maxLoops = getRangeValue(colorAnimation.count);\n    colorValue.time = defaultTime;\n    colorValue.delayTime = getRangeValue(colorAnimation.delay) * millisecondsToSeconds;\n    if (!colorAnimation.sync) {\n      colorValue.velocity *= getRandom();\n      colorValue.value *= getRandom();\n    }\n    colorValue.initialValue = colorValue.value;\n    colorValue.offset = setRangeValue(colorAnimation.offset);\n  } else {\n    colorValue.velocity = defaultVelocity;\n  }\n}\nexport function updateColorValue(data, range, decrease, delta) {\n  const minLoops = 0,\n    minDelay = 0,\n    identity = 1,\n    minVelocity = 0,\n    minOffset = 0,\n    velocityFactor = 3.6;\n  if (!data || !data.enable || (data.maxLoops ?? minLoops) > minLoops && (data.loops ?? minLoops) > (data.maxLoops ?? minLoops)) {\n    return;\n  }\n  if (!data.time) {\n    data.time = 0;\n  }\n  if ((data.delayTime ?? minDelay) > minDelay && data.time < (data.delayTime ?? minDelay)) {\n    data.time += delta.value;\n  }\n  if ((data.delayTime ?? minDelay) > minDelay && data.time < (data.delayTime ?? minDelay)) {\n    return;\n  }\n  const offset = data.offset ? randomInRange(data.offset) : minOffset,\n    velocity = (data.velocity ?? minVelocity) * delta.factor + offset * velocityFactor,\n    decay = data.decay ?? identity,\n    max = getRangeMax(range),\n    min = getRangeMin(range);\n  if (!decrease || data.status === AnimationStatus.increasing) {\n    data.value += velocity;\n    if (data.value > max) {\n      if (!data.loops) {\n        data.loops = 0;\n      }\n      data.loops++;\n      if (decrease) {\n        data.status = AnimationStatus.decreasing;\n      } else {\n        data.value -= max;\n      }\n    }\n  } else {\n    data.value -= velocity;\n    const minValue = 0;\n    if (data.value < minValue) {\n      if (!data.loops) {\n        data.loops = 0;\n      }\n      data.loops++;\n      data.status = AnimationStatus.increasing;\n    }\n  }\n  if (data.velocity && decay !== identity) {\n    data.velocity *= decay;\n  }\n  data.value = clamp(data.value, min, max);\n}\nexport function updateColor(color, delta) {\n  if (!color) {\n    return;\n  }\n  const {\n    h,\n    s,\n    l\n  } = color;\n  const ranges = {\n    h: {\n      min: 0,\n      max: 360\n    },\n    s: {\n      min: 0,\n      max: 100\n    },\n    l: {\n      min: 0,\n      max: 100\n    }\n  };\n  if (h) {\n    updateColorValue(h, ranges.h, false, delta);\n  }\n  if (s) {\n    updateColorValue(s, ranges.s, true, delta);\n  }\n  if (l) {\n    updateColorValue(l, ranges.l, true, delta);\n  }\n}","map":null,"metadata":{},"sourceType":"module"}