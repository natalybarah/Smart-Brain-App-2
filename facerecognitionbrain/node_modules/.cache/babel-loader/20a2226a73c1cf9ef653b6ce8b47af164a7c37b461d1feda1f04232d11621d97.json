{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\natha\\\\OneDrive\\\\Escritorio\\\\ZTM\\\\Final project\\\\facerecognitionbrain\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\n//import Clarifai from 'clarifai';\nimport FaceRecognition from './Components/FaceRecognition/FaceRecognition';\nimport Navigation from './Components/Navigation/Navigation';\nimport Logo from './Components/Logo/Logo';\nimport ImageLinkForm from './Components/ImageLinkForm/ImageLinkForm';\nimport Rank from './Components/Rank/Rank';\nimport Signin from './Components/Signin/Signin';\nimport Register from './Components/Register/Register';\nimport AppParticles from './Components/Particles/Particles';\n//import { useEffect, useMemo, useState } from \"react\";\n//import Particles, { initParticlesEngine } from \"@tsparticles/react\";\n//import { loadSlim } from \"@tsparticles/slim\";\n//NIUEVO//\n//const app = new Clarifai.App({\n//apiKey: 'da25080a0f594fbfb117ffb83bcaaf1b'\n//});\n///////////////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, user and app ID, model details, and the URL\n// of the image we want as an input. Change these strings to run your own example.\n//////////////////////////////////////////////////////////////////////////////////////////////////\n\n// Your PAT (Personal Access Token) can be found in the Account's Security section\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst returnClarifaiRequestOptions = imageUrl => {\n  const PAT = '21667652913c4147be6abf57dbb3ea9c';\n  // Specify the correct user_id/app_id pairings\n  // Since you're making inferences outside your app's scope\n  const USER_ID = 'natalykodes';\n  const APP_ID = 'test';\n  // Change these to whatever model and image URL you want to use\n  const MODEL_ID = 'face-detection';\n  const IMAGE_URL = imageUrl;\n  const raw = JSON.stringify({\n    \"user_app_id\": {\n      \"user_id\": USER_ID,\n      \"app_id\": APP_ID\n    },\n    \"inputs\": [{\n      \"data\": {\n        \"image\": {\n          \"url\": IMAGE_URL\n        }\n      }\n    }]\n  });\n  const requestOptions = {\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      'Authorization': 'Key ' + PAT\n    },\n    body: raw\n  };\n  return requestOptions;\n};\n\n//ANTERIOR//\nclass App extends Component {\n  constructor() {\n    super();\n    this.loadUser = data => {\n      this.setState({\n        user: {\n          id: data.id,\n          name: data.name,\n          email: data.email,\n          password: data.password,\n          entries: data.entries,\n          joined: data.joined\n        }\n      });\n    };\n    this.calculateFaceLocation = data => {\n      const clarifaiFace = data.outputs[0].data.regions[0].region_info.bounding_box;\n      const image = document.getElementById('inputImage');\n      const width = Number(image.width);\n      const height = Number(image.height);\n      console.log(width, height);\n      return {\n        leftCol: clarifaiFace.left_col * width,\n        topRow: clarifaiFace.top_row * height,\n        rightCol: width - clarifaiFace.right_col * width,\n        bottomRow: height - clarifaiFace.bottom_row * height\n      };\n    };\n    this.displayFaceBox = box => {\n      console.log(box);\n      this.setState({\n        box: box\n      });\n    };\n    this.onInputChange = event => {\n      this.setState({\n        input: event.target.value\n      });\n    };\n    //ESTE ES ES EL NUEVO\n    //new new\n    this.onButtonSubmit = () => {\n      this.setState({\n        imageUrl: this.state.input\n      });\n      fetch(\"https://api.clarifai.com/v2/models/\" + 'face-detection' + \"/outputs\", returnClarifaiRequestOptions(this.state.input)).then(response => response.json()).then(response => {\n        console.log(\"hi\", response);\n        if (response) {\n          fetch('http://localhost:1000/image', {\n            method: 'put',\n            headers: {\n              'Content-type': 'application/json'\n            },\n            body: JSON.stringify({\n              id: this.state.user.id\n            })\n          }).then(response => response.json()).then(count => {\n            this.setState(Object.assign(this.state.user, {\n              entries: count\n            }));\n          });\n        }\n        this.displayFaceBox(this.calculateFaceLocation(response));\n      }).catch(err => console.log(err));\n    };\n    /*onButtonSubmit= ()=>{\n      this.setState({imageUrl: this.state.input});\n      //app.models.predict('face-detection', this.state.input)\n      \n      fetch(\"https://api.clarifai.com/v2/models/\" + 'face-detection' + \"/outputs\", returnClarifaiRequestOptions(this.state.input))\n          .then(response => response.json())\n          .then(response=>{ //here is the other missing parenthesis\n            console.log(\"hi\", response)\n            if (response){\n              fetch('http://localhost:3000/image',{\n                method: 'put',\n                headers: {'Content-Type': 'application/json'},\n                body: JSON.stringify({\n                  id: this.state.user.id\n                  })\n              })\n            .then(response=>response.json())\n            //.then(response=>this.displayFaceBox(this.calculateFaceLocation(response)))\n            //.catch(err=>console.log(err)); \n          .then(count=>{\n            this.setState(Object.assign(this.state.user,{entries:count}))\n          })\n        }\n          this.displayFaceBox(this.calculateFaceLocation(response))\n        })\n          .catch(err=>console.log(err)); \n          } */\n    this.onRouteChange = route => {\n      if (route === 'signout') {\n        this.setState({\n          isSignedIn: false\n        });\n      } else if (route === 'home') {\n        this.setState({\n          isSignedIn: true\n        });\n      }\n      this.setState({\n        route: route\n      }); //CHAT antes \"route\"\n    };\n    this.state = {\n      input: '',\n      imageUrl: '',\n      box: {},\n      route: 'Signin',\n      isSignedIn: false,\n      user: {\n        id: \"\",\n        name: '',\n        email: '',\n        password: '',\n        entries: '0',\n        joined: ''\n      }\n    };\n  }\n  /*onButtonSubmit= ()=>{ ESTE ES EL MIO\n    this.setState({imageUrl: this.state.input});\n    //app.models.predict('face-detection', this.state.input)\n    \n    fetch(\"https://api.clarifai.com/v2/models/\" + 'face-detection' + \"/outputs\", returnClarifaiRequestOptions(this.state.input))\n        .then(response => response.json())\n        .then(response=>this.displayFaceBox(this.calculateFaceLocation(response)))\n        .catch(err=>console.log(err)); \n  }\n  onRouteChange= (route)=>{\n    if(route==='signout'){\n      this.setState({isSignedIn: false})\n    } else if (route=== 'home'){\n      this.setState({isSignedIn: true})\n    }\n    this.setState({route: route}); //CHAT antes \"route\"\n  }*/\n  render() {\n    const {\n      isSignedIn,\n      imageUrl,\n      route,\n      box\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(AppParticles, {\n        className: \"particles\"\n        //id=\"tsparticles\"\n        //particlesLoaded={particlesLoaded}\n        //options={particleOptions}\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Navigation, {\n        isSignedIn: isSignedIn,\n        onRouteChange: this.onRouteChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 11\n      }, this), route === 'home' ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Logo, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 18\n        }, this), /*#__PURE__*/_jsxDEV(ImageLinkForm, {\n          onInputChange: this.onInputChange,\n          onButtonSubmit: this.onButtonSubmit\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(Rank, {\n          name: this.state.user.name,\n          entries: this.state.user.entries\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(FaceRecognition, {\n          box: box,\n          imageUrl: imageUrl\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 19\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 13\n      }, this) : route === 'Signin' ? /*#__PURE__*/_jsxDEV(Signin, {\n        loadUser: this.loadUser,\n        onRouteChange: this.onRouteChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 17\n      }, this) //chat antes this.setState.\n      : /*#__PURE__*/_jsxDEV(Register, {\n        loadUser: this.loadUser,\n        onRouteChange: this.onRouteChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 9\n    }, this);\n  }\n}\n;\nexport default App;","map":{"version":3,"names":["React","Component","FaceRecognition","Navigation","Logo","ImageLinkForm","Rank","Signin","Register","AppParticles","jsxDEV","_jsxDEV","returnClarifaiRequestOptions","imageUrl","PAT","USER_ID","APP_ID","MODEL_ID","IMAGE_URL","raw","JSON","stringify","requestOptions","method","headers","body","App","constructor","loadUser","data","setState","user","id","name","email","password","entries","joined","calculateFaceLocation","clarifaiFace","outputs","regions","region_info","bounding_box","image","document","getElementById","width","Number","height","console","log","leftCol","left_col","topRow","top_row","rightCol","right_col","bottomRow","bottom_row","displayFaceBox","box","onInputChange","event","input","target","value","onButtonSubmit","state","fetch","then","response","json","count","Object","assign","catch","err","onRouteChange","route","isSignedIn","render","className","children","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["C:/Users/natha/OneDrive/Escritorio/ZTM/Final project/facerecognitionbrain/src/App.js"],"sourcesContent":["import React, {Component} from 'react';\nimport './App.css';\n//import Clarifai from 'clarifai';\nimport FaceRecognition from './Components/FaceRecognition/FaceRecognition'\nimport Navigation from './Components/Navigation/Navigation';\nimport Logo from './Components/Logo/Logo';\nimport ImageLinkForm from './Components/ImageLinkForm/ImageLinkForm';\nimport Rank from './Components/Rank/Rank';\nimport Signin from './Components/Signin/Signin'\nimport Register from './Components/Register/Register'\n\nimport AppParticles from './Components/Particles/Particles';\n//import { useEffect, useMemo, useState } from \"react\";\n//import Particles, { initParticlesEngine } from \"@tsparticles/react\";\n//import { loadSlim } from \"@tsparticles/slim\";\n//NIUEVO//\n//const app = new Clarifai.App({\n  //apiKey: 'da25080a0f594fbfb117ffb83bcaaf1b'\n //});\n ///////////////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, user and app ID, model details, and the URL\n    // of the image we want as an input. Change these strings to run your own example.\n    //////////////////////////////////////////////////////////////////////////////////////////////////\n\n    // Your PAT (Personal Access Token) can be found in the Account's Security section\n  const returnClarifaiRequestOptions= (imageUrl)=>{\n    const PAT = '21667652913c4147be6abf57dbb3ea9c';\n    // Specify the correct user_id/app_id pairings\n    // Since you're making inferences outside your app's scope\n    const USER_ID = 'natalykodes';       \n    const APP_ID = 'test';\n    // Change these to whatever model and image URL you want to use\n    const MODEL_ID = 'face-detection';\n    \n    const IMAGE_URL = imageUrl; \n    const raw = JSON.stringify({\n      \"user_app_id\": {\n          \"user_id\": USER_ID,\n          \"app_id\": APP_ID\n      },\n      \"inputs\": [\n          {\n              \"data\": {\n                  \"image\": {\n                      \"url\": IMAGE_URL\n                  }\n              }\n          }\n      ]\n  });\n const requestOptions = {\n    method: 'POST',\n    headers: {\n        'Accept': 'application/json',\n        'Authorization': 'Key ' + PAT\n    },\n    body: raw\n};\n  return requestOptions\n  }\n\n\n        //ANTERIOR//\nclass App extends Component {\n\n  constructor(){\n    super();\n    this.state={\n      input: '',\n      imageUrl: '',\n      box: {},\n      route: 'Signin',\n      isSignedIn: false,\n      user:{\n        id: \"\",\n        name: '',\n        email: '',\n        password: '',\n        entries: '0',\n        joined: ''\n      }\n    }\n  }\n\n  loadUser=(data)=>{\n    this.setState({user:{\n      id: data.id,\n      name: data.name,\n      email: data.email,\n      password: data.password,\n      entries: data.entries,\n      joined: data.joined\n    }})\n  }\n  calculateFaceLocation =(data)=>{\n    const clarifaiFace= data.outputs[0].data.regions[0].region_info.bounding_box\n    const image= document.getElementById('inputImage');\n    const width= Number(image.width);\n    const height= Number(image.height);\n    console.log(width, height);\n    return{\n      leftCol: clarifaiFace.left_col * width,\n      topRow: clarifaiFace.top_row * height,\n      rightCol: width - (clarifaiFace.right_col * width),\n      bottomRow: height - (clarifaiFace.bottom_row * height),\n    }\n  }\n\n\n  displayFaceBox= (box)=>{\n    console.log(box);\n    this.setState({box: box})\n  }\n\n  onInputChange= (event)=>{\n    this.setState({input: event.target.value})\n  }\n//ESTE ES ES EL NUEVO\n//new new\nonButtonSubmit = () => {\n  this.setState({ imageUrl: this.state.input });\n\n  fetch(\"https://api.clarifai.com/v2/models/\" + 'face-detection' + \"/outputs\", returnClarifaiRequestOptions(this.state.input))\n    .then(response => response.json())\n    .then(response => {\n      console.log(\"hi\", response);\n      if (response) {\n        fetch('http://localhost:1000/image', { \n          method: 'put',\n          headers: {'Content-type': 'application/json'},\n          body: JSON.stringify({\n              id: this.state.user.id\n        })\n      })\n        .then(response=>response.json())\n        .then(count=>{\n          this.setState(Object.assign(this.state.user, {entries:count}))\n          })\n        }\n        this.displayFaceBox(this.calculateFaceLocation(response));\n      \n    })\n    .catch(err => console.log(err));\n};\n/*onButtonSubmit= ()=>{\n  this.setState({imageUrl: this.state.input});\n  //app.models.predict('face-detection', this.state.input)\n  \n  fetch(\"https://api.clarifai.com/v2/models/\" + 'face-detection' + \"/outputs\", returnClarifaiRequestOptions(this.state.input))\n      .then(response => response.json())\n      .then(response=>{ //here is the other missing parenthesis\n        console.log(\"hi\", response)\n        if (response){\n          fetch('http://localhost:3000/image',{\n            method: 'put',\n            headers: {'Content-Type': 'application/json'},\n            body: JSON.stringify({\n              id: this.state.user.id\n              })\n          })\n        .then(response=>response.json())\n        //.then(response=>this.displayFaceBox(this.calculateFaceLocation(response)))\n        //.catch(err=>console.log(err)); \n      .then(count=>{\n        this.setState(Object.assign(this.state.user,{entries:count}))\n      })\n    }\n      this.displayFaceBox(this.calculateFaceLocation(response))\n    })\n      .catch(err=>console.log(err)); \n      } */ \n\nonRouteChange= (route)=>{\n  if(route==='signout'){\n    this.setState({isSignedIn: false})\n  } else if (route=== 'home'){\n    this.setState({isSignedIn: true})\n  }\n  this.setState({route: route}); //CHAT antes \"route\"\n}\n\n\n\n  /*onButtonSubmit= ()=>{ ESTE ES EL MIO\n    this.setState({imageUrl: this.state.input});\n    //app.models.predict('face-detection', this.state.input)\n    \n    fetch(\"https://api.clarifai.com/v2/models/\" + 'face-detection' + \"/outputs\", returnClarifaiRequestOptions(this.state.input))\n        .then(response => response.json())\n        .then(response=>this.displayFaceBox(this.calculateFaceLocation(response)))\n        .catch(err=>console.log(err)); \n  }\n  onRouteChange= (route)=>{\n    if(route==='signout'){\n      this.setState({isSignedIn: false})\n    } else if (route=== 'home'){\n      this.setState({isSignedIn: true})\n    }\n    this.setState({route: route}); //CHAT antes \"route\"\n  }*/\n   render(){\n    const {isSignedIn, imageUrl, route, box}= this.state\n      return (\n        <div className=\"App\">\n          <AppParticles className='particles'\n            //id=\"tsparticles\"\n            //particlesLoaded={particlesLoaded}\n            //options={particleOptions}\n          />\n    \n          <Navigation isSignedIn={isSignedIn} onRouteChange={this.onRouteChange}/>\n          { route === 'home' \n            ? \n            <div><Logo />\n                  <ImageLinkForm \n                  onInputChange={this.onInputChange} \n                  onButtonSubmit={this.onButtonSubmit}/>\n                  <Rank name={this.state.user.name} entries={this.state.user.entries}      />\n                  <FaceRecognition box={box} imageUrl={imageUrl}/>\n          </div>\n            : (\n              route === 'Signin' \n              ? <Signin loadUser={this.loadUser} onRouteChange={this.onRouteChange}/> //chat antes this.setState.\n              : <Register loadUser={this.loadUser} onRouteChange={this.onRouteChange}/>\n            ) \n          }\n        </div>\n      );\n    }\n      \n    \n  };\n\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}