{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\natha\\\\OneDrive\\\\Escritorio\\\\ZTM\\\\Final project\\\\facerecognitionbrain\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport './App.css';\nimport Navigation from './Components/Navigation/Navigation';\nimport Logo from './Components/Logo/Logo';\nimport ImageLinkForm from './Components/ImageLinkForm/ImageLinkForm';\nimport Rank from './Components/Rank/Rank';\nimport { useEffect, useMemo, useState } from \"react\";\nimport Particles, { initParticlesEngine } from \"@tsparticles/react\";\nimport { loadSlim } from \"@tsparticles/slim\";\nimport { particleOptions } from './particleOptions';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [init, setInit] = useState(false);\n\n  // this should be run only once per application lifetime\n  useEffect(() => {\n    initParticlesEngine(async engine => {\n      await loadSlim(engine);\n    }).then(() => {\n      setInit(true);\n    });\n  }, []);\n  const particlesLoaded = container => {\n    console.log(container);\n  };\n  const options = useMemo(() => ({\n    // your particle options go here\n  }), []);\n  if (init) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(Particles, {\n        className: \"particles\",\n        id: \"tsparticles\",\n        particlesLoaded: particlesLoaded,\n        options: options\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Navigation, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Logo, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(ImageLinkForm, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Rank, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n}\n_s(App, \"eB+NWpxmGZSqHQDaTSx/Qv0E/5M=\");\n_c = App;\n;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","Navigation","Logo","ImageLinkForm","Rank","useEffect","useMemo","useState","Particles","initParticlesEngine","loadSlim","particleOptions","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","init","setInit","engine","then","particlesLoaded","container","console","log","options","className","children","id","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/natha/OneDrive/Escritorio/ZTM/Final project/facerecognitionbrain/src/App.js"],"sourcesContent":["import React from 'react';\nimport './App.css';\nimport Navigation from './Components/Navigation/Navigation';\nimport Logo from './Components/Logo/Logo';\nimport ImageLinkForm from './Components/ImageLinkForm/ImageLinkForm';\nimport Rank from './Components/Rank/Rank';\nimport { useEffect, useMemo, useState } from \"react\";\nimport Particles, { initParticlesEngine } from \"@tsparticles/react\";\nimport { loadSlim } from \"@tsparticles/slim\";\nimport {particleOptions} from './particleOptions'\n\n\n\nfunction App() {\n\n    const [init, setInit] = useState(false);\n  \n    // this should be run only once per application lifetime\n    useEffect(() => {\n      initParticlesEngine(async (engine) => {\n        await loadSlim(engine);\n      }).then(() => {\n        setInit(true);\n      });\n    }, []);\n  \n    const particlesLoaded = (container) => {\n      console.log(container);\n    };\n  \n    const options = useMemo(\n      () => ({\n        // your particle options go here\n        \n}),\n      []\n    );\n  \n    if (init) {\n      return (\n        <div className=\"App\">\n          <Particles className='particles'\n            id=\"tsparticles\"\n            particlesLoaded={particlesLoaded}\n            options={options}\n          />\n          <Navigation />\n          <Logo />\n          <ImageLinkForm />\n          <Rank />\n        </div>\n      );\n    }\n  \n    return <></>;\n  };\n\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAO,WAAW;AAClB,OAAOC,UAAU,MAAM,oCAAoC;AAC3D,OAAOC,IAAI,MAAM,wBAAwB;AACzC,OAAOC,aAAa,MAAM,0CAA0C;AACpE,OAAOC,IAAI,MAAM,wBAAwB;AACzC,SAASC,SAAS,EAAEC,OAAO,EAAEC,QAAQ,QAAQ,OAAO;AACpD,OAAOC,SAAS,IAAIC,mBAAmB,QAAQ,oBAAoB;AACnE,SAASC,QAAQ,QAAQ,mBAAmB;AAC5C,SAAQC,eAAe,QAAO,mBAAmB;AAAA,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAIjD,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EAEX,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;;EAEvC;EACAF,SAAS,CAAC,MAAM;IACdI,mBAAmB,CAAC,MAAOW,MAAM,IAAK;MACpC,MAAMV,QAAQ,CAACU,MAAM,CAAC;IACxB,CAAC,CAAC,CAACC,IAAI,CAAC,MAAM;MACZF,OAAO,CAAC,IAAI,CAAC;IACf,CAAC,CAAC;EACJ,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMG,eAAe,GAAIC,SAAS,IAAK;IACrCC,OAAO,CAACC,GAAG,CAACF,SAAS,CAAC;EACxB,CAAC;EAED,MAAMG,OAAO,GAAGpB,OAAO,CACrB,OAAO;IACL;EAAA,CAEP,CAAC,EACI,EACF,CAAC;EAED,IAAIY,IAAI,EAAE;IACR,oBACEL,OAAA;MAAKc,SAAS,EAAC,KAAK;MAAAC,QAAA,gBAClBf,OAAA,CAACL,SAAS;QAACmB,SAAS,EAAC,WAAW;QAC9BE,EAAE,EAAC,aAAa;QAChBP,eAAe,EAAEA,eAAgB;QACjCI,OAAO,EAAEA;MAAQ;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAClB,CAAC,eACFpB,OAAA,CAACZ,UAAU;QAAA6B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACdpB,OAAA,CAACX,IAAI;QAAA4B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACRpB,OAAA,CAACV,aAAa;QAAA2B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACjBpB,OAAA,CAACT,IAAI;QAAA0B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CAAC;EAEV;EAEA,oBAAOpB,OAAA,CAAAE,SAAA,mBAAI,CAAC;AACd;AAACE,EAAA,CA1CMD,GAAG;AAAAkB,EAAA,GAAHlB,GAAG;AA0CT;AAGH,eAAeA,GAAG;AAAC,IAAAkB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}