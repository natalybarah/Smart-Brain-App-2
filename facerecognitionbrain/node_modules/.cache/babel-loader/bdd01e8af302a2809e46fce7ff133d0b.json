{"ast":null,"code":"import { getRangeValue, parseAlpha } from \"./NumberUtils.js\";\nvar RgbIndexes;\n(function (RgbIndexes) {\n  RgbIndexes[RgbIndexes[\"r\"] = 1] = \"r\";\n  RgbIndexes[RgbIndexes[\"g\"] = 2] = \"g\";\n  RgbIndexes[RgbIndexes[\"b\"] = 3] = \"b\";\n  RgbIndexes[RgbIndexes[\"a\"] = 5] = \"a\";\n})(RgbIndexes || (RgbIndexes = {}));\nexport class RgbColorManager {\n  constructor() {\n    this.key = \"rgb\";\n    this.stringPrefix = \"rgb\";\n  }\n  handleColor(color) {\n    const colorValue = color.value,\n      rgbColor = colorValue.rgb ?? color.value;\n    if (rgbColor.r !== undefined) {\n      return rgbColor;\n    }\n  }\n  handleRangeColor(color) {\n    const colorValue = color.value,\n      rgbColor = colorValue.rgb ?? color.value;\n    if (rgbColor.r !== undefined) {\n      return {\n        r: getRangeValue(rgbColor.r),\n        g: getRangeValue(rgbColor.g),\n        b: getRangeValue(rgbColor.b)\n      };\n    }\n  }\n  parseString(input) {\n    if (!input.startsWith(this.stringPrefix)) {\n      return;\n    }\n    const regex = /rgba?\\(\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*(,\\s*([\\d.%]+)\\s*)?\\)/i,\n      result = regex.exec(input),\n      radix = 10,\n      minLength = 4,\n      defaultAlpha = 1;\n    return result ? {\n      a: result.length > minLength ? parseAlpha(result[RgbIndexes.a]) : defaultAlpha,\n      b: parseInt(result[RgbIndexes.b], radix),\n      g: parseInt(result[RgbIndexes.g], radix),\n      r: parseInt(result[RgbIndexes.r], radix)\n    } : undefined;\n  }\n}","map":null,"metadata":{},"sourceType":"module"}